rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Documento do próprio usuário
    match /users/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow create: if request.auth != null && request.auth.uid == uid;
      allow update: if request.auth != null
                    && request.auth.uid == uid
                    && request.resource.data.uid == uid;
      allow delete: if request.auth != null && request.auth.uid == uid;
    }

    // Portfólios
    match /portfolios/{portfolioId} {
      function isOwner() {
        return request.auth != null && resource != null && resource.data.ownerId == request.auth.uid;
      }
      function ownerUnchanged() {
        return resource == null || resource.data.ownerId == request.resource.data.ownerId;
      }
      function isPublic() {
        return (resource != null && resource.data.visibility == 'public') ||
               (request.resource != null && request.resource.data.visibility == 'public');
      }

      // Leitura pública de portfólios públicos; dono lê sempre
      allow get, list, read: if isPublic() || isOwner();

      // Criação: apenas dono (ownerId == auth.uid). Recomendado usar docId == ownerId para 1 por usuário.
      allow create: if request.auth != null
                    && request.resource.data.ownerId == request.auth.uid
                    && ownerUnchanged();

      // Atualização: dono pode atualizar. Permitir também increments seguros de likes/views por outros.
      allow update: if (
          // Dono atualiza livremente (exceto trocar ownerId)
          (isOwner() && ownerUnchanged())
          || (
            request.auth != null
            && resource != null
            // Apenas permitir mudanças em likes/views/updatedAt por terceiros
            && request.resource.data.diff(resource.data).changedKeys().hasOnly(['likes','views','updatedAt'])
            && (
              // like pode ficar igual ou variar em +/-1
              request.resource.data.likes == resource.data.likes + 1 ||
              request.resource.data.likes == resource.data.likes - 1 ||
              request.resource.data.likes == resource.data.likes
            )
            && (
              // views pode ficar igual ou aumentar em 1
              request.resource.data.views == resource.data.views + 1 ||
              request.resource.data.views == resource.data.views
            )
          )
        );

      // Exclusão: apenas dono
      allow delete: if isOwner();

      // Subcoleções
      // likes: doc id = uid do liker; criar/apagar pelo próprio
      match /likes/{uid} {
        allow read: if true; // público
        allow create, delete: if request.auth != null && request.auth.uid == uid;
        allow update: if false; // não atualizar parcialmente
      }

      // comments: criar por autenticado; apagar pelo autor ou dono; leitura pública
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.text is string
                      && request.resource.data.text.size() > 0
                      && request.resource.data.createdAt == request.time;
        allow delete: if request.auth != null && (
                        request.auth.uid == resource.data.userId ||
                        (get(/databases/$(database)/documents/portfolios/$(portfolioId)).data.ownerId == request.auth.uid)
                      );
        allow update: if false;
      }
    }

    // Notificações do usuário
    match /users/{uid}/notifications/{nid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      // Permitir criação por qualquer autenticado, com restrições básicas
      allow create: if request.auth != null
                    && request.resource.data.receiverUid == uid
                    && request.resource.data.actorUid == request.auth.uid
                    && request.resource.data.type is string
                    && request.resource.data.createdAt == request.time;
      // Marca como lida: apenas o dono
      allow update: if request.auth != null && request.auth.uid == uid;
      allow delete: if request.auth != null && request.auth.uid == uid;
    }

    // Templates e exemplos: leitura pública, escrita só por admin
    match /templates/{id} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    match /examples/{id} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}

